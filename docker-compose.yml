services:
  redis:
    image: redis:7.0
    container_name: ctf-redis
    ports: [ "6379:6379" ]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks: [ ctf-network ]

  db:
    image: mysql:8.0
    container_name: ctf-mysql
    ports: [ "3306:3306" ]
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [ ctf-network ]

  backend:
    image: ${DOCKER_HUB_USERNAME}/backend:latest
    container_name: ctf-backend
    depends_on:
      db:
        condition: service_healthy
    ports: [ "8080:8080" ]   # 필요시 유지
    environment:
      SPRING_PROFILES_ACTIVE: local
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      SPRING_SECURITY_USER_NAME: ${SPRING_SECURITY_USER_NAME}
      SPRING_SECURITY_USER_PASSWORD: ${SPRING_SECURITY_USER_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      GMAIL_USERNAME: ${GMAIL_USERNAME}
      GMAIL_APP_PASSWORD: ${GMAIL_APP_PASSWORD}
      API_KEY: ${API_KEY}
      API_URL: ${API_URL}
      BUCKET: ${BUCKET}
      LOCATION: ${LOCATION}
      PROJECT_ID: ${PROJECT_ID}
      GCP_JSON_FILE: ${GCP_JSON_FILE}
      GOOGLE_APPLICATION_CREDENTIALS: /secrets/gcp_service_account.json
    volumes:
      # ✅ Prod: HOST_GCP_JSON_PATH=/home/ubuntu/src/${GCP_JSON_FILE}
      # ✅ CI  : 미설정 시 /dev/null로 바인드(오류 방지)
      - ${HOST_GCP_JSON_PATH:-/dev/null}:/secrets/gcp_service_account.json:ro
    networks: [ ctf-network ]

  frontend:
    image: ${DOCKER_HUB_USERNAME}/frontend:latest
    container_name: ctf-frontend
    expose: [ "80" ]     # nginx가 내부에서 접근
    networks: [ ctf-network ]

  nginx:
    image: nginx:1.25-alpine
    container_name: ctf-nginx
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"          # HTTP-01 챌린지/초기 기동
      - "443:443"        # 인증 후 HTTPS 제공
    volumes:
      # ✅ 파일 바인드 → 디렉터리 바인드로 변경 (안정)
      - /home/ubuntu/app/nginx/conf.d:/etc/nginx/conf.d:ro
      # ACME 챌린지 공유 디렉터리 (certbot과 공유)
      - /home/ubuntu/app/certbot/www:/var/www/certbot:rw
      # 인증서/키 저장 디렉터리 (certbot과 공유)
      - /home/ubuntu/app/certbot/config:/etc/letsencrypt:rw
    networks: [ ctf-network ]

  # certbot은 on-demand로 실행 (run --rm)되므로 평소에는 sleep
  certbot:
    image: certbot/certbot:latest
    container_name: ctf-certbot
    volumes:
      - /home/ubuntu/app/certbot/www:/var/www/certbot
      - /home/ubuntu/app/certbot/config:/etc/letsencrypt
    entrypoint: sh
    command: -c "sleep infinity"
    networks: [ ctf-network ]

  test:
    image: gradle:8.1.1-jdk17
    container_name: ctf-test
    working_dir: /app
    volumes:
      - ./Back:/app
      - gradle_cache:/home/gradle/.gradle
    environment:
      SPRING_PROFILES_ACTIVE: local
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      SPRING_SECURITY_USER_NAME: ${SPRING_SECURITY_USER_NAME}
      SPRING_SECURITY_USER_PASSWORD: ${SPRING_SECURITY_USER_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
    entrypoint: ["sh", "-c"]
    command: ["./gradlew test --stacktrace"]
    networks: [ ctf-network ]

volumes:
  gradle_cache:

networks:
  ctf-network:
    driver: bridge
