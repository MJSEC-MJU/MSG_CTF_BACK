name: Docker Compose CI

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build-and-run:
    runs-on: ubuntu-latest

    
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}

    steps:
    
      - name: Check out code
        uses: actions/checkout@v3

   
      - name: Create .env file
        run: |
          echo "DB_HOST=${{ env.DB_HOST }}" >> .env
          echo "DB_NAME=${{ env.DB_NAME }}" >> .env
          echo "DB_USERNAME=${{ env.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ env.DB_PASSWORD }}" >> .env
          echo "DB_PORT=${{ env.DB_PORT }}" >> .env

  
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

     
      - name: Docker Compose Build
        run: docker-compose build

      - name: Start DB
        run: docker-compose up -d db

   
      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            docker-compose exec -T db mysqladmin ping -h localhost --silent && break
            echo "Waiting for MySQL..."
            sleep 2
          done

      # 7) Gradle 빌드 & 테스트 (DB가 준비된 상태)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradlew*', '**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Gradle build & test
        run: |
          cd Back
          chmod +x gradlew
          ./gradlew clean build

      # 8) (선택) app 컨테이너 기동 (통합 테스트)
      - name: Start app
        run: docker-compose up -d app

      # 9) (선택) 간단 Healthcheck / e2e 테스트
      - name: Integration Tests
        run: |
          curl -f http://localhost:8080/actuator/health

      # 10) 정리: 컨테이너 종료
      - name: Stop containers
        if: always()
        run: |
          docker-compose down
