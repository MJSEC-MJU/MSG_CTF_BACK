name: Backend & NGINX CD (Auto-SSL)

on:
  push: { branches: [ dev ] }
  workflow_dispatch:

concurrency:
  group: backend-nginx-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build & Push Backend
        run: |
          set -euo pipefail
          DF="Dockerfile"; [ -f dockerfile ] && DF="dockerfile"
          IMAGE="${{ secrets.DOCKER_HUB_USERNAME }}/backend"
          TAG_SHA="${{ github.sha }}"
          docker build -t "${IMAGE}:${TAG_SHA}" -t "${IMAGE}:latest" -f "$DF" .
          docker push "${IMAGE}:${TAG_SHA}"
          docker push "${IMAGE}:latest"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      DOMAIN:            ${{ secrets.DOMAIN }}
      WWW_DOMAIN:        www.${{ secrets.DOMAIN }}
      LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}
      REMOTE_DIR:        /home/ubuntu/app
      REMOTE_HOST:       ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}
      REMOTE_IP:         ${{ secrets.SERVER_IP }}
      IMAGE_TAG:         ${{ github.sha }}

    steps:
      - uses: actions/checkout@v4

      # SSH 준비
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Test SSH
        run: ssh -o ConnectTimeout=10 "$REMOTE_HOST" "echo OK"

      # 원격 docker compose v2 보장
      - name: Ensure docker compose v2 on remote
        continue-on-error: true
        run: |
          ssh "$REMOTE_HOST" <<'EOSSH'
            set -Eeuo pipefail
            if sudo docker compose version >/dev/null 2>&1; then
              echo "docker compose v2 already present"; exit 0
            fi
            sudo apt-get update -y
            if ! sudo apt-get install -y docker-compose-plugin; then
              sudo apt-get install -y curl
              ARCH="$(uname -m)"
              case "$ARCH" in
                x86_64|amd64) ARCH="x86_64" ;;
                aarch64|arm64) ARCH="aarch64" ;;
                *) ARCH="x86_64" ;;
              esac
              sudo install -m 0755 -d /usr/local/lib/docker/cli-plugins
              sudo curl -fsSL "https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-$ARCH" \
                -o /usr/local/lib/docker/cli-plugins/docker-compose
              sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            fi
            sudo docker compose version
            echo "docker compose v2 installed"
          EOSSH

      # Docker 데몬 기동 보장
      - name: Ensure Docker service is running
        run: |
          ssh "$REMOTE_HOST" <<'EOSSH'
            set -euo pipefail
            sudo systemctl enable --now docker || sudo service docker start
            sudo docker info >/dev/null
          EOSSH

      # 원격 디렉터리 준비
      - name: Prepare remote dirs (no .env here)
        run: |
          ssh "$REMOTE_HOST" <<'EOSSH'
            set -euo pipefail
            REMOTE_DIR='${{ env.REMOTE_DIR }}'
            if ! command -v envsubst >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y gettext-base
            fi
            sudo mkdir -p "$REMOTE_DIR/nginx/conf.d" \
                         "$REMOTE_DIR/certbot/config" \
                         "$REMOTE_DIR/certbot/www/.well-known/acme-challenge" \
                         "$REMOTE_DIR/certbot/logs"
          EOSSH

      # .env 생성 → 업로드 (root:root 600로 유지)
      - name: Build .env locally and upload
        env:
          VITE_API_URL_SECRET: ${{ secrets.VITE_API_URL }}
          REACT_APP_API_URL_SECRET: ${{ secrets.REACT_APP_API_URL }}
        run: |
          set -euo pipefail
          VITE_URL="${VITE_API_URL_SECRET:-https://${{ env.DOMAIN }}}"
          REACT_URL="${REACT_APP_API_URL_SECRET:-https://${{ env.DOMAIN }}}"

          cat > .env.ci <<'EOF'
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN=${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          SPRING_SECURITY_USER_NAME=${{ secrets.SPRING_SECURITY_USER_NAME }}
          SPRING_SECURITY_USER_PASSWORD=${{ secrets.SPRING_SECURITY_USER_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          GMAIL_USERNAME=${{ secrets.GMAIL_USERNAME }}
          GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}
          API_KEY=${{ secrets.API_KEY }}
          API_URL=${{ secrets.API_URL }}
          BUCKET=${{ secrets.BUCKET }}
          LOCATION=${{ secrets.LOCATION }}
          PROJECT_ID=${{ secrets.PROJECT_ID }}
          GCP_JSON_FILE=${{ secrets.GCP_JSON_FILE }}
          GOOGLE_APPLICATION_CREDENTIALS=/secrets/gcp_service_account.json

          DOMAIN=${{ env.DOMAIN }}
          WWW_DOMAIN=${{ env.WWW_DOMAIN }}
          LETSENCRYPT_EMAIL=${{ env.LETSENCRYPT_EMAIL }}

          HOST_GCP_JSON_PATH=${{ env.REMOTE_DIR }}/gcp_service_account.json

          FRONTEND_ORIGIN=https://${{ env.DOMAIN }}
          CORS_ALLOWED_ORIGINS=https://${{ env.DOMAIN }},https://${{ env.WWW_DOMAIN }}
          SPRING_WEB_CORS_ALLOWED_ORIGINS=https://${{ env.DOMAIN }},https://${{ env.WWW_DOMAIN }}
          IMAGE_TAG=${{ env.IMAGE_TAG }}
          EOF

          {
            printf '\n# --- frontend runtime variables ---\n'
            printf 'VITE_API_URL=%s\n' "$VITE_URL"
            printf 'REACT_APP_API_URL=%s\n' "$REACT_URL"
          } >> .env.ci

          scp -o StrictHostKeyChecking=no .env.ci "$REMOTE_HOST":/tmp/.env
          ssh "$REMOTE_HOST" "sudo mv /tmp/.env '${{ env.REMOTE_DIR }}/.env' && sudo chown root:root '${{ env.REMOTE_DIR }}/.env' && sudo chmod 600 '${{ env.REMOTE_DIR }}/.env'"

      # docker-compose / 템플릿 업로드
      - name: Upload docker-compose.yml via /tmp
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml "$REMOTE_HOST":/tmp/docker-compose.yml
          ssh "$REMOTE_HOST" "sudo mv /tmp/docker-compose.yml '${{ env.REMOTE_DIR }}/docker-compose.yml'"

      - name: Upload NGINX templates via /tmp
        run: |
          scp -o StrictHostKeyChecking=no nginx/default.http.conf.template  "$REMOTE_HOST":/tmp/default.http.conf.template
          scp -o StrictHostKeyChecking=no nginx/default.https.conf.template "$REMOTE_HOST":/tmp/default.https.conf.template
          ssh "$REMOTE_HOST" "
            sudo mv /tmp/default.http.conf.template  '${{ env.REMOTE_DIR }}/nginx/default.http.conf.template';
            sudo mv /tmp/default.https.conf.template '${{ env.REMOTE_DIR }}/nginx/default.https.conf.template';
          "

      # (옵션) GCP 키 업로드
      - name: Upload GCP Service Account (optional)
        env:
          GCP_SA: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${GCP_SA:-}" ]; then
            echo "GCP_SERVICE_ACCOUNT_KEY not set. Skipping."
          else
            if printf '%s' "$GCP_SA" | tr -d '\n' | base64 -d >/dev/null 2>&1; then
              printf '%s' "$GCP_SA" | tr -d '\n' | base64 -d > gcp.json
            else
              printf '%s' "$GCP_SA" > gcp.json
            fi
            scp -o StrictHostKeyChecking=no gcp.json "$REMOTE_HOST":/tmp/gcp.json
            ssh "$REMOTE_HOST" "sudo mv /tmp/gcp.json '${{ env.REMOTE_DIR }}/gcp_service_account.json'"
            rm -f gcp.json
          fi

      # 1) HTTP 기동 (envsubst → up). compose는 sudo로 실행 (.env 접근 가능)
      - name: Start stack (HTTP only)
        run: |
          ssh "$REMOTE_HOST" <<'EOSSH'
            set -euo pipefail
            cd '${{ env.REMOTE_DIR }}'

            DOMAIN='${{ env.DOMAIN }}' WWW_DOMAIN='${{ env.WWW_DOMAIN }}' \
              envsubst '$DOMAIN $WWW_DOMAIN' < nginx/default.http.conf.template \
              | sudo tee nginx/conf.d/default.conf >/dev/null

            sudo docker compose down --remove-orphans || true
            sudo docker compose pull || true
            sudo docker compose up -d nginx backend frontend redis
          EOSSH

      # 80 확인 (DNS 무시, IP 고정)
      - name: Wait for HTTP (via fixed IP)
        run: |
          set -euo pipefail
          APEX="${{ env.DOMAIN }}"; WWW="${{ env.WWW_DOMAIN }}"; IP="${{ env.REMOTE_IP }}"
          echo "Waiting for http://${APEX} via ${IP}"
          ok=0
          for i in $(seq 1 24); do
            if curl -fsS -m 6 --resolve "${APEX}:80:${IP}" "http://${APEX}" -o /dev/null; then
              echo "HTTP OK (apex)"; ok=1; break
            fi
            echo "...waiting HTTP ($i/24)"; sleep 5
          done
          [ "$ok" -eq 1 ] || { echo "HTTP failed (apex via IP)"; exit 1; }

          # www는 단순 체크 (인증 단계는 DNS 필요)
          if curl -fsS -m 6 --resolve "${WWW}:80:${IP}" "http://${WWW}" -o /dev/null; then
            echo "HTTP OK (www)"
          else
            echo "WWW not reachable via IP (might be no DNS)."
          fi

      # 2) 인증서 발급/갱신 (certbot 컨테이너 직접 실행)
      - name: Issue/Renew SSL via certbot
        run: |
          ssh "$REMOTE_HOST" <<'EOSSH'
            set -euo pipefail
            cd '${{ env.REMOTE_DIR }}'
            sudo docker compose run --rm --entrypoint certbot certbot \
              certonly \
              --webroot -w /var/www/certbot \
              --non-interactive --keep-until-expiring \
              --email '${{ env.LETSENCRYPT_EMAIL }}' \
              -d '${{ env.DOMAIN }}' -d '${{ env.WWW_DOMAIN }}' \
              --agree-tos --no-eff-email --rsa-key-size 4096
          EOSSH

      # 3) HTTPS 전환 & NGINX 리로드
      - name: Apply HTTPS config & restart all services
        run: |
          ssh "$REMOTE_HOST" <<'EOSSH'
            set -euo pipefail
            cd '${{ env.REMOTE_DIR }}'

            DOMAIN='${{ env.DOMAIN }}' WWW_DOMAIN='${{ env.WWW_DOMAIN }}' \
              envsubst '$DOMAIN $WWW_DOMAIN' < nginx/default.https.conf.template \
              | sudo tee nginx/conf.d/default.conf >/dev/null

            # 설정 파일 확인
            sudo docker compose exec -T nginx nginx -t
            
            # 전체 스택 재시작 (순서 보장)
            sudo docker compose down
            sudo docker compose up -d
          EOSSH

      # 443 확인 (DNS 무시, SNI만 호스트로 강제)
      - name: Verify HTTPS (apex & www via fixed IP)
        run: |
          set -euo pipefail
          IP="${{ env.REMOTE_IP }}"
          for host in "${{ env.DOMAIN }}" "${{ env.WWW_DOMAIN }}"; do
            echo "Check https://$host via $IP"
            ok=0
            for i in $(seq 1 12); do
              if curl -fsS -m 8 --resolve "$host:443:${IP}" "https://$host" -o /dev/null; then
                echo "HTTPS OK: $host"; ok=1; break
              fi
              echo "...waiting HTTPS $host ($i/12)"; sleep 5
            done
            [ "$ok" -eq 1 ] || { echo "HTTPS failed for $host (via IP)"; exit 1; }
          done

      - name: Prune old images
        run: ssh "$REMOTE_HOST" "sudo docker image prune -f --filter 'until=24h' || true"
