name: Backend & NGINX CD (Auto-SSL)

on:
  push: { branches: [ dev ] }
  workflow_dispatch:

concurrency:
  group: backend-nginx-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build & Push Backend
        run: |
          set -euo pipefail
          # Dockerfile 이름 양쪽 케이스 지원
          DF="Dockerfile"; [ -f dockerfile ] && DF="dockerfile"
          IMAGE="${{ secrets.DOCKER_HUB_USERNAME }}/backend"
          TAG_SHA="${{ github.sha }}"
          docker build -t "${IMAGE}:${TAG_SHA}" -t "${IMAGE}:latest" -f "$DF" .
          docker push "${IMAGE}:${TAG_SHA}"
          docker push "${IMAGE}:latest"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      DOMAIN:            ${{ secrets.DOMAIN }}              
      WWW_DOMAIN:        www.${{ secrets.DOMAIN }}           
      LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}
      REMOTE_DIR:        /home/ubuntu/app
      REMOTE_HOST:       ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}
      REMOTE_IP:         ${{ secrets.SERVER_IP }}
      IMAGE_TAG:         ${{ github.sha }}

    steps:
      - uses: actions/checkout@v4

      # SSH 준비
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Test SSH
        run: ssh -o ConnectTimeout=10 "$REMOTE_HOST" "echo OK"

      # 원격 docker compose v2 보장 (있으면 패스)
      - name: Ensure docker compose v2 on remote
        continue-on-error: true
        run: |
          ssh "$REMOTE_HOST" <<'EOSSH'
            set -Eeuo pipefail
            if sudo docker compose version >/dev/null 2>&1; then
              echo "docker compose v2 already present"; exit 0
            fi
            sudo apt-get update -y
            if ! sudo apt-get install -y docker-compose-plugin; then
              sudo apt-get install -y curl
              ARCH="$(uname -m)"
              case "$ARCH" in
                x86_64|amd64) ARCH="x86_64" ;;
                aarch64|arm64) ARCH="aarch64" ;;
                *) ARCH="x86_64" ;;
              esac
              sudo install -m 0755 -d /usr/local/lib/docker/cli-plugins
              sudo curl -fsSL "https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-$ARCH" \
                -o /usr/local/lib/docker/cli-plugins/docker-compose
              sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            fi
            sudo docker compose version
            echo "docker compose v2 installed"
          EOSSH

      # Docker 데몬 기동 보장
      - name: Ensure Docker service is running
        run: |
          ssh "$REMOTE_HOST" <<'EOSSH'
            set -euo pipefail
            sudo systemctl enable --now docker || sudo service docker start
            sudo docker info >/dev/null
          EOSSH

      # 원격 디렉터리만 준비 (.env는 로컬에서 생성)
      - name: Prepare remote dirs (no .env here)
        run: |
          ssh "$REMOTE_HOST" <<'EOSSH'
            set -euo pipefail
            REMOTE_DIR='${{ env.REMOTE_DIR }}'
            # envsubst 설치
            if ! command -v envsubst >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y gettext-base
            fi
            sudo mkdir -p "$REMOTE_DIR/nginx/conf.d" \
                         "$REMOTE_DIR/certbot/config" \
                         "$REMOTE_DIR/certbot/www/.well-known/acme-challenge" \
                         "$REMOTE_DIR/certbot/logs"
          EOSSH

      # 로컬에서 .env 생성 → 업로드
      - name: Build .env locally and upload
        env:
          VITE_API_URL_SECRET: ${{ secrets.VITE_API_URL }}           # (선택)
          REACT_APP_API_URL_SECRET: ${{ secrets.REACT_APP_API_URL }} # (선택)
        run: |
          set -euo pipefail
          VITE_URL="${VITE_API_URL_SECRET:-https://${{ env.DOMAIN }}}"
          REACT_URL="${REACT_APP_API_URL_SECRET:-https://${{ env.DOMAIN }}}"

          # 시크릿 내부의 $ 확장 방지 위해 quoted heredoc 사용
          cat > .env.ci <<'EOF'
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN=${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          SPRING_SECURITY_USER_NAME=${{ secrets.SPRING_SECURITY_USER_NAME }}
          SPRING_SECURITY_USER_PASSWORD=${{ secrets.SPRING_SECURITY_USER_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          GMAIL_USERNAME=${{ secrets.GMAIL_USERNAME }}
          GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}
          API_KEY=${{ secrets.API_KEY }}
          API_URL=${{ secrets.API_URL }}
          BUCKET=${{ secrets.BUCKET }}
          LOCATION=${{ secrets.LOCATION }}
          PROJECT_ID=${{ secrets.PROJECT_ID }}
          GCP_JSON_FILE=${{ secrets.GCP_JSON_FILE }}
          GOOGLE_APPLICATION_CREDENTIALS=/secrets/gcp_service_account.json

          # --- Domains (as provided) ---
          DOMAIN=${{ env.DOMAIN }}
          WWW_DOMAIN=${{ env.WWW_DOMAIN }}
          LETSENCRYPT_EMAIL=${{ env.LETSENCRYPT_EMAIL }}

          # --- Paths ---
          HOST_GCP_JSON_PATH=${{ env.REMOTE_DIR }}/gcp_service_account.json

          # --- derived ---
          FRONTEND_ORIGIN=https://${{ env.DOMAIN }}
          CORS_ALLOWED_ORIGINS=https://${{ env.DOMAIN }},https://${{ env.WWW_DOMAIN }}
          SPRING_WEB_CORS_ALLOWED_ORIGINS=https://${{ env.DOMAIN }},https://${{ env.WWW_DOMAIN }}
          IMAGE_TAG=${{ env.IMAGE_TAG }}
          EOF

          {
            printf '\n# --- frontend runtime variables ---\n'
            printf 'VITE_API_URL=%s\n' "$VITE_URL"
            printf 'REACT_APP_API_URL=%s\n' "$REACT_URL"
          } >> .env.ci

          scp -o StrictHostKeyChecking=no .env.ci "$REMOTE_HOST":/tmp/.env
          ssh "$REMOTE_HOST" "sudo mv /tmp/.env '${{ env.REMOTE_DIR }}/.env' && sudo chown root:root '${{ env.REMOTE_DIR }}/.env' && sudo chmod 600 '${{ env.REMOTE_DIR }}/.env'"

      # docker-compose 파일 업로드 (yml/yaml 둘 다 지원)
      # 업로드는 /tmp로 → sudo mv (권한 안전)
      - name: Upload docker-compose.yml via /tmp
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/tmp/docker-compose.yml
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
            sudo mv /tmp/docker-compose.yml '${{ env.REMOTE_DIR }}/docker-compose.yml'
          "

      - name: Upload NGINX templates via /tmp
        run: |
          scp -o StrictHostKeyChecking=no nginx/default.http.conf.template \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/tmp/default.http.conf.template
          scp -o StrictHostKeyChecking=no nginx/default.https.conf.template \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/tmp/default.https.conf.template
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
            sudo mv /tmp/default.http.conf.template  '${{ env.REMOTE_DIR }}/nginx/default.http.conf.template'
            sudo mv /tmp/default.https.conf.template '${{ env.REMOTE_DIR }}/nginx/default.https.conf.template'
          "

      # (옵션) GCP 키 업로드: /tmp → sudo mv
      - name: Upload GCP Service Account (optional)
        env:
          GCP_SA: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${GCP_SA:-}" ]; then
            echo "GCP_SERVICE_ACCOUNT_KEY not set. Skipping."
            exit 0
          fi
          if printf '%s' "$GCP_SA" | tr -d '\n' | base64 -d >/dev/null 2>&1; then
            printf '%s' "$GCP_SA" | tr -d '\n' | base64 -d > gcp.json
          else
            printf '%s' "$GCP_SA" > gcp.json
          fi
          scp -o StrictHostKeyChecking=no gcp.json \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/tmp/gcp.json
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
            sudo mv /tmp/gcp.json '${{ env.REMOTE_DIR }}/gcp_service_account.json'
          "
          rm -f gcp.json

      # 1) HTTP 기동 (파일 쓰기는 sudo tee)
      - name: Start stack (HTTP only)
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} <<'EOSSH'
            set -euo pipefail
            cd '${{ env.REMOTE_DIR }}'

            DOMAIN='${{ env.DOMAIN }}' WWW_DOMAIN='${{ env.WWW_DOMAIN }}' \
              envsubst '\$DOMAIN,\$WWW_DOMAIN' < nginx/default.http.conf.template \
              | sudo tee nginx/conf.d/default.conf >/dev/null

            docker compose down --remove-orphans || true
            docker compose pull || true
            docker compose up -d nginx backend frontend redis
          EOSSH

      - name: Wait for HTTP
        run: |
          for i in $(seq 1 24); do
            if curl -fsS -m 5 -o /dev/null "http://${{ env.DOMAIN }}"; then
              echo "HTTP OK"; exit 0
            fi
            echo "...waiting HTTP ($i/24)"; sleep 5
          done
          exit 1

      # 2) 인증서 발급/갱신
      - name: Issue/Renew SSL via certbot
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} <<'EOSSH'
            set -euo pipefail
            cd '${{ env.REMOTE_DIR }}'
            docker compose run --rm certbot certonly \
              --webroot -w /var/www/certbot \
              --non-interactive --keep-until-expiring \
              --email '${{ env.LETSENCRYPT_EMAIL }}' \
              -d '${{ env.DOMAIN }}' -d '${{ env.WWW_DOMAIN }}' \
              --agree-tos --no-eff-email --rsa-key-size 4096
          EOSSH

      # 3) HTTPS 전환 & 리로드 (sudo tee)
      - name: Apply HTTPS config & reload nginx
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} <<'EOSSH'
            set -euo pipefail
            cd '${{ env.REMOTE_DIR }}'

            DOMAIN='${{ env.DOMAIN }}' WWW_DOMAIN='${{ env.WWW_DOMAIN }}' \
              envsubst '\$DOMAIN,\$WWW_DOMAIN' < nginx/default.https.conf.template \
              | sudo tee nginx/conf.d/default.conf >/dev/null

            docker compose exec -T nginx nginx -t
            docker compose exec -T nginx nginx -s reload
          EOSSH

      - name: Verify HTTPS (apex & www)
        run: |
          for host in "${{ env.DOMAIN }}" "${{ env.WWW_DOMAIN }}"; do
            for i in $(seq 1 12); do
              if curl -fsS -m 5 -o /dev/null "https://$host"; then
                echo "HTTPS OK: $host"; break
              fi
              [ "$i" -eq 12 ] && { echo "HTTPS failed for $host" >&2; exit 1; }
              echo "...waiting HTTPS $host ($i/12)"; sleep 10
            done
          done

      - name: Prune old images
        run: ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "docker image prune -f --filter 'until=24h' || true"
